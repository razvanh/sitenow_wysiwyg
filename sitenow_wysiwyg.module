<?php
/**
 * @file
 * Code for the SiteNow WYSIWYG feature.
 */

include_once 'sitenow_wysiwyg.features.inc';

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function sitenow_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {
  // Check if the editor is CKEditor.
  if ($context['profile']->editor == 'ckeditor') {
    // Enable the spell checker by default.
    $settings['scayt_autoStartup'] = TRUE;

    // Add Outline blocks.
    $settings['startupOutlineBlocks'] = TRUE;

    // Include custom wysiwyg helper css files.
    $module_location = $GLOBALS['base_path'] . drupal_get_path('module', 'sitenow_wysiwyg');
    $settings['contentsCss'][] = $module_location . '/css/wysiwyg.css';

    // If sitenow_standardtheme is the default theme.
    if (variable_get('theme_default') === 'sitenow_standardtheme') {
      // Include global styles in the WYSIWYG.
      $settings['contentsCss'][] = '/sites/all/themes/sitenow_standardtheme/css/global.styles.css';
    }

    // If custom override WYISWYG theme css files have been submitted via the
    // ui, add them to config.
    if (variable_get('sitenow_wysiwyg_theme_css') != '') {
      $wysiwyg_css_location = variable_get('sitenow_wysiwyg_theme_css');
      $override_css = explode(',', strtr($wysiwyg_css_location, array('%b' => base_path(), '%t' => drupal_get_path('theme', variable_get('theme_default', NULL)))));
      foreach ($override_css as $css) {
        $settings['contentsCss'][] = $css;
      }
    }

    // create a custom config file in order to disable alt and title text fields
    // in ckeditor dialog.
    $settings['customConfig'] = $module_location . '/js/customconfig.js';
  }
}

/**
 * Implements hook_menu().
 */
function sitenow_wysiwyg_menu() {
  $items = array();
  $items['admin/config/content/wysiwyg-override'] = array(
    'title' => 'Wysiwyg profiles overrides',
    'description' => 'Using SiteNow WYSIWYG on a custom site? You probably need to configure this.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitenow_custom_wysiwyg_override_form'),
    'access arguments' => array('administer filters'),
  );
  return $items;
}

/**
 * Page callback: Sitenow WYSIWYG settings.
 *
 * @see sitenow_wysiwyg_menu()
 */
function sitenow_custom_wysiwyg_override_form($form, &$form_state) {
  $form['sitenow_wysiwyg_theme_css'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS path'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('sitenow_wysiwyg_theme_css'),
    '#description' => t('Since SiteNow WYISWYG encapsulates all WYSIWYG settings into features, we need a way to tell WYSIWYG to use our theme style without overriding the feature.')  . '<br />' . t('Enter path to a CSS file or a list of CSS files separated by a comma.') . '<br />' . t('Available tokens: <code>%b</code> (base path, eg: <code>/</code>), <code>%t</code> (path to theme, eg: <code>themes/garland</code>)') . '<br />' . t('Example:') . ' css/editor.css,/themes/garland/style.css,%b%t/style.css,http://example.com/external.css',
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_wysiwyg_form_filter_admin_format_form_alter(&$form, &$form_state, $form_id) {
  if ($form['format']['#default_value'] === 'filtered_html' || $form['format']['#default_value'] === 'full_html') {
    // Disable name field.
    $form['name']['#disabled'] = TRUE;
    // Disable all filter options.
    $form['filters']['#disabled'] = TRUE;
    // Enable pathologic local path settings since those are site-specific.
    $form['filters']['settings']['pathologic']['local_paths']['#disabled'] = FALSE;
  }
  if ($form['format']['#default_value'] === 'filtered_html') {
    // Enable CSS class rules since those are currently configurable.
    $form['filters']['settings']['wysiwyg']['rule_valid_classes']['#disabled'] = FALSE;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_wysiwyg_form_wysiwyg_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form['format']['#value'] === 'filtered_html' || $form['format']['#value'] === 'full_html') {
    // Disable the ability to edit any wysiwyg profile controlled by SiteNow
    // WYSIWYG.
    $form['basic']['#disabled'] = TRUE;
    $form['buttons']['#disabled'] = TRUE;
    $form['appearance']['#disabled'] = TRUE;
    $form['output']['#disabled'] = TRUE;
    $form['css']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_filter_default_formats_alter().
 */
function sitenow_wysiwyg_filter_default_formats_alter(&$formats) {
  // Filtered HTML settings.
  // Get available filters for filtered_html text format.
  $filtered_html = filter_list_format('filtered_html');
  // Check to see if object exists.
  if (isset($filtered_html['pathologic'])) {
    // Pathologic settings.
    // Get the local paths value from the available filters.
    $filtered_pathologic = get_object_vars($filtered_html['pathologic']);
    $filtered_pathologic_local_paths = $filtered_pathologic['settings']['local_paths'];
    // Set the local paths default in the feature to the value that's stored
    // in the database.
    $formats['filtered_html']['filters']['pathologic']['settings']['local_paths'] = $filtered_pathologic_local_paths;
  }
  // WYSIWYG Filter valid classes.
  // Get the rule_valid_classes value from the available filters.
  if (isset($filtered_html['wysiwyg'])) {
    $filtered_wysiwyg = get_object_vars($filtered_html['wysiwyg']);
    $filtered_wysiwyg_valid_classes = $filtered_wysiwyg['settings']['rule_valid_classes'];
    // Set the local paths default in the feature to the value that's stored in
    // the database.
    $formats['filtered_html']['filters']['wysiwyg']['settings']['rule_valid_classes'] = $filtered_wysiwyg_valid_classes;
  }

  // Full HTML settings.
  // Get available filters for full_html text format.
  $full_html = filter_list_format('full_html');
  // Check to see if object exists.
  if (isset($full_html['pathologic'])) {
    // Pathologic settings.
    // Get the local paths value from the available filters.
    $full_pathologic = get_object_vars($full_html['pathologic']);
    $full_pathologic_local_paths = $full_pathologic['settings']['local_paths'];
    // Set the local paths default in the feature to the value that's stored
    // in the database.
    $formats['full_html']['filters']['pathologic']['settings']['local_paths'] = $full_pathologic_local_paths;
  }
}
